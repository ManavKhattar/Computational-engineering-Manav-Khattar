% Define constants
L = 0.1; % Length of the cup (m)
W = 0.05; % Width of the cup (m)
H = 0.15; % Height of the cup (m)
T_hot = 100; % Temperature of the hot fluid (°C)
T_cold = 20; % Temperature of the cold fluid (°C)
k = 0.15; % Thermal conductivity of the fluid (W/m*K)
rho = 1000; % Density of the fluid (kg/m^3)
cp = 4186; % Specific heat capacity of the fluid (J/kg*K)
beta = 0.003; % Thermal expansion coefficient (1/K)
mu = 0.001; % Dynamic viscosity of the fluid (kg/m*s)
g = 9.81; % Acceleration due to gravity (m/s^2)

% Define grid parameters
Nx = 50; % Number of grid points in the x-direction
Ny = 100; % Number of grid points in the y-direction
dx = L / Nx; % Grid spacing in the x-direction
dy = H / Ny; % Grid spacing in the y-direction
dt = 0.1; % Time step (s)
t_end = 100; % Total simulation time (s)
nt = round(t_end / dt); % Number of time steps

% Initialize temperature field
T = ones(Nx, Ny) * T_cold;

% Apply boundary conditions
T(:, 1) = T_hot; % Left boundary (hot)
T(:, end) = T_cold; % Right boundary (cold)
T(end, :) = T_cold; % Top boundary (cup surface)

% Initialize velocity field
u = zeros(Nx + 1, Ny);
v = zeros(Nx, Ny + 1);

% Main loop
for iter = 1:nt
    % Compute velocity field
    for i = 2:Nx
        for j = 2:Ny+1
            u(i, j) = u(i, j) - dt * (1 / dx) * (T(i, j-1) - T(i-1, j-1));
        end
    end
    for i = 2:Nx+1
        for j = 2:Ny
            v(i, j) = v(i, j) - dt * (1 / dy) * (T(i-1, j) - T(i-1, j-1));
        end
    end
    
    % Apply boundary conditions for velocity
    u(:, 1) = 0; % Left boundary
    u(:, end) = 0; % Right boundary
    v(1, :) = 0; % Bottom boundary
    v(end, :) = 0; % Top boundary
    
    % Compute temperature field
    for i = 2:Nx-1
        for j = 2:Ny-1
            T(i, j) = T(i, j) + dt * (k / (rho * cp)) * ((T(i+1, j) - 2 * T(i, j) + T(i-1, j)) / dx^2 + (T(i, j+1) - 2 * T(i, j) + T(i, j-1)) / dy^2) + dt * beta * g * (T(i, j) - T_cold);
        end
    end
    
    % Apply boundary conditions for temperature
    T(:, 1) = T_hot; % Left boundary (hot)
    T(:, end) = T_cold; % Right boundary (cold)
    T(end, :) = T_cold; % Top boundary (cup surface)
    
    % Display progress
    if mod(iter, 10) == 0
        fprintf('Iteration %d\n', iter);
    end
end

% Plot results
[X, Y] = meshgrid(linspace(0, L, Nx), linspace(0, H, Ny));
surf(X, Y, T');
xlabel('x (m)');
ylabel('y (m)');
zlabel('Temperature (°C)');
title('2D Natural Convection from a Cup');
colorbar;
